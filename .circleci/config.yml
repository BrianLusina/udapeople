version: 2.1

parameters:
  workingdir:
    type: string
    default: "~/udapeople"
  node-image-tag:
    type: string
    default: "13.8.0"

executors:
  aws-executor:
    docker:
      - image: amazon/aws-cli
    working_directory: << pipeline.parameters.workingdir >>
  
  ansible-executor:
    docker:
      - image: python:3.7-alpine3.11
    working_directory: << pipeline.parameters.workingdir >>
  
  smoke-executor:
    docker:
      - image: python
    working_directory: << pipeline.parameters.workingdir >>

  docker-executor:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: << pipeline.parameters.workingdir >>

  node-executor:
    docker:
      - image: circleci/node:<< pipeline.parameters.node-image-tag >>
    working_directory: << pipeline.parameters.workingdir >>

orbs:
  slack: circleci/slack@4.3.0
  aws-cli: circleci/aws-cli@1.3.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stackId:
        description: Stack ID
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: | 
            aws cloudformation delete-stack --stack-name << parameters.stackId >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      id:
        description: ID
        type: string
    steps:
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/DB_MIGRATION_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi

  alert_on_failure:
    description: Notifies channel on failure
    parameters:
      channel:
        description: Slack channel to send slack notification
        type: string
        default: $SLACK_DEFAULT_CHANNEL
    steps:
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

jobs:

  install-backend-dependencies:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install Backend Dependencies
          command: |
            cd backend
            npm install

      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  install-frontend-dependencies:
   executor: node-executor
   steps:
      - checkout
      - run:
          name: Install Frontend Dependencies
          command: |
            cd frontend
            npm install

      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-frontend:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: 
            - frontend-{{ .Environment.CIRCLE_SHA1 }}-{{ .Branch }}
            - frontend-{{ .Environment.CIRCLE_SHA1 }}
            - frontend
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      - save_cache:
          key: frontend-{{ .Environment.CIRCLE_SHA1 }}-{{ .Branch }}
          paths: 
            - frontend/node_modules
      - alert_on_failure

  build-backend:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: 
            - backend-{{ .Environment.CIRCLE_SHA1 }}-{{ .Branch }}
            - backend-{{ .Environment.CIRCLE_SHA1 }}
            - backend
      - run:
          name: Backend build
          command: |
            cd backend
            npm run build
      - save_cache:
          key: backend-{{ .Environment.CIRCLE_SHA1 }}-{{ .Branch }}
          paths:          
            - backend/node_modules
      - alert_on_failure

  test-frontend:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: 
            - frontend-{{ .Environment.CIRCLE_SHA1 }}-{{ .Branch }}
            - frontend-{{ .Environment.CIRCLE_SHA1 }}
            - frontend
      - run:
          name: Test
          command: |
            cd frontend
            npm run test
      - alert_on_failure

  test-backend:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys: 
            - backend-{{ .Environment.CIRCLE_SHA1 }}-{{ .Branch }}
            - backend-{{ .Environment.CIRCLE_SHA1 }}
            - backend
      - run:
          name: Test
          command: |
            cd backend
            npm run test
      - alert_on_failure

  scan-frontend:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: frontend-{{ .Environment.CIRCLE_SHA1 }}-{{ .Branch }}
      - run:
          name: Audit
          command: |
            cd frontend
            npm audit --audit-level=critical
      - alert_on_failure

  scan-backend:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: backend-{{ .Environment.CIRCLE_SHA1 }}-{{ .Branch }}
      - run:
          name: Audit
          command: |
            cd backend
            npm audit --audit-level=critical
      - alert_on_failure

  deploy-infrastructure:
    executor: aws-executor
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file << pipeline.parameters.workingdir >>/infra/servers/backend.yaml \
              --tags project=udapeople \
              --stack-name "udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file << pipeline.parameters.workingdir >>/infra/web/frontend.yaml \
              --tags project=udapeople \
              --stack-name "udapeople-front-end-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "${BACKEND_IP}" https://api.memstash.io/values/udapeople-backend-url

      - destroy-environment:
          stackId: udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}

      - destroy-environment:
          stackId: udapeople-frontend-end-${CIRCLE_WORKFLOW_ID:0:7}

      # Fails on amazon/cli docker image due to missing tar utility.
      # Ref: https://github.com/aws/aws-cli/issues/5106
      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - .

      - alert_on_failure

  configure-infrastructure:
    executor: ansible-executor
    steps:
      - checkout

      - add_ssh_keys:
          fingerprints:
            - ef:9c:cc:93:e2:98:ef:83:55:b6:d9:50:45:85:9d:47

      - attach_workspace:
          at: .

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl

      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"          
            curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/udapeople-backend-url  >> << pipeline.parameters.workingdir >>/playbook/inventory.txt
            ansible-playbook playbook/configure-server.yml -i playbook/inventory.txt

      # - destroy-environment:
      #     stackId: udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}

      # - destroy-environment:
      #     stackId: udapeople-frontend-end-${CIRCLE_WORKFLOW_ID:0:7}

      - alert_on_failure

  run-migrations:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

      - run:
          name: Run migrations
          no_output_timeout: 15m
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"

            cd backend
            npm run migrations > migration_status
            
      - run:
          name: Send migration results to memstash
          command: ./scripts/migration_status.sh

     # Here's where you will add some code to rollback on failure 
      - alert_on_failure

  deploy-frontend:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      - run:
          name: Get backend url
          command: |
            cd frontend
            export BACKEND_IP=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/udapeople-backend-url)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            npm run build

      - aws-cli/setup

      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp --recursive frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}"

      - destroy-environment:
          stackId: udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}

      - destroy-environment:
          stackId: udapeople-frontend-end-${CIRCLE_WORKFLOW_ID:0:7}

      - alert_on_failure

  deploy-backend:
    executor: ansible-executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - ef:9c:cc:93:e2:98:ef:83:55:b6:d9:50:45:85:9d:47

      - attach_workspace:
          at: .

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible openssh-client tar gzip curl

      - run:
          name: Deploy backend
          no_output_timeout: 15m
          command: |
            curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/udapeople-backend-url  >> << pipeline.parameters.workingdir >>/playbook/inventory.txt
            ansible-playbook -i << pipeline.parameters.workingdir >>/playbook/inventory.txt << pipeline.parameters.workingdir >>/playbook/deploy-backend.yml -vv

      - destroy-environment:
          stackId: udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}

      - destroy-environment:
          stackId: udapeople-frontend-end-${CIRCLE_WORKFLOW_ID:0:7}

      - alert_on_failure

  smoke-test:
    executor: smoke-executor
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm

      - aws-cli/setup

      - run:
          name: Get backend url
          command: |
            # your code here

      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_URL=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/udapeople-backend-url)
            curl "$BACKEND_URL/api/status"

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.af-south-1.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"

      - destroy-environment:
          stackId: udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}

      - destroy-environment:
          stackId: udapeople-frontend-end-${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

      - alert_on_failure

  cloudfront-update:
    executor: aws-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl

      - run:
          name: Store old WorkflowID in memstash for cleanup phase
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: ${MEMSTASH_TOKEN}" --request PUT --data "$WorkflowID" https://api.memstash.io/values/oldWorkflowID

      - run:
          name: Update cloudfront distribution
          command: |
            cd infra/web
            aws cloudformation deploy \
              --template-file cloudfront.yaml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      - destroy-environment:
          stackId: udapeople-back-end-${CIRCLE_WORKFLOW_ID:0:7}

      - destroy-environment:
          stackId: udapeople-frontend-end-${CIRCLE_WORKFLOW_ID:0:7}

      - revert-migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}

      - alert_on_failure

  cleanup:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/oldWorkflowID)
            export CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Remove old stacks and files
          command: ./scripts/cleanup.sh

      - alert_on_failure

workflows:
  build_test_scan_deploy_configure:
    jobs:
      - install-frontend-dependencies
      - install-backend-dependencies

      - build-frontend:
          context: udapeople-ctx
          requires:
            - install-frontend-dependencies

      - build-backend:
          context: udapeople-ctx
          requires:
            - install-backend-dependencies

      - test-frontend:
          context: udapeople-ctx
          requires: 
            - build-frontend

      - test-backend:
          context: udapeople-ctx
          requires: 
            - build-backend

      - scan-backend:
          context: udapeople-ctx
          requires: 
            - build-backend

      - scan-frontend:
          context: udapeople-ctx
          requires: 
            - build-frontend

      - deploy-infrastructure:
          context: udapeople-ctx
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only:
                - main

      - configure-infrastructure:
          context: udapeople-ctx
          requires: 
            - deploy-infrastructure

      - run-migrations:
          context: udapeople-ctx
          requires: 
            - configure-infrastructure

      - deploy-frontend:
          context: udapeople-ctx
          requires: 
            - run-migrations
          
      - deploy-backend:
          context: udapeople-ctx
          requires:
            - run-migrations

      - smoke-test:
          context: udapeople-ctx
          requires: 
             - deploy-backend
             - deploy-frontend

      - cloudfront-update:
          context: udapeople-ctx
          requires: 
            - smoke-test

      - cleanup:
          context: udapeople-ctx
          requires: 
            - cloudfront-update