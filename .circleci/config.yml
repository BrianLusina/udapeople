version: 2.1

parameters:
  workingdir:
    type: string
    default: "~/udapeople"
  node-image-tag:
    type: string
    default: "13.8.0"

executors:
  aws-executor:
    docker:
      - image: amazon/aws-cli
    working_directory: << pipeline.parameters.workingdir >>
  
  ansible-executor:
    docker:
      - image: python:3.7-alpine3.11
    working_directory: << pipeline.parameters.workingdir >>
  
  smoke-executor:
    docker:
      - image: amazon/aws-cli
    working_directory: << pipeline.parameters.workingdir >>

  docker-executor:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: << pipeline.parameters.workingdir >>

  node-executor:
    docker:
      - image: circleci/node:<< pipeline.parameters.node-image-tag >>
    working_directory: << pipeline.parameters.workingdir >>

orbs:
  slack: circleci/slack@4.3.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stackId:
        description: Stack ID
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      stackId:
        description: Stack ID
        type: string
    steps:
      - run:
          name: Revert migrations
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
    
  alert_on_failure:
    description: Notifies channel on failure
    parameters:
      channel:
        description: Slack channel to send slack notification
        type: string
        default: $SLACK_DEFAULT_CHANNEL
    steps:
      - slack/notify:
          channel: $SLACK_DEFAULT_CHANNEL
          event: fail
          template: basic_fail_1

jobs:
  build-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: 
            - frontend--$CIRCLE_SHA1-{{ .Branch }}
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: frontend-$CIRCLE_SHA1-{{ .Branch }}
          paths: 
            - frontend/node_modules
      - alert_on_failure

  build-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-$CIRCLE_SHA1-{{ .Branch }}
      - run:
          name: Backend build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          key: backend-$CIRCLE_SHA1-{{ .Branch }}
          paths:          
            - backend/node_modules
      - alert_on_failure

  test-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          key: frontend-$CIRCLE_SHA1-{{ .Branch }}
      - run:
          name: Test
          command: |
            cd frontend
            npm run test
      - alert_on_failure

  test-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          key: backend-$CIRCLE_SHA1-{{ .Branch }}
      - run:
          name: Test
          command: |
            cd backend
            npm run test
      - alert_on_failure

  scan-frontend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          key: frontend-$CIRCLE_SHA1-{{ .Branch }}
      - run:
          name: Audit
          command: |
            cd frontend
            npm audit --audit-level=critical
      - alert_on_failure

  scan-backend:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          key: backend-$CIRCLE_SHA1-{{ .Branch }}
      - run:
          name: Audit
          command: |
            cd backend
            npm audit --audit-level=critical
      - alert_on_failure

  deploy-infrastructure:
    executor: aws-executor
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              #--tags project=your-tag \
              # --stack-name "your back-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              #--tags project=your-tag \
              # --stack-name "your front-end stack name with workflow id" \
              # --parameter-overrides ID="your workflow id"  
              exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - alert_on_failure

  configure-infrastructure:
    executor: ansible-executor
    steps:
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure      
      - alert_on_failure

  run-migrations:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      
      - alert_on_failure

  deploy-frontend:
    executor: aws-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
      - alert_on_failure

  deploy-backend:
    executor: ansible-executor
    steps:
      - checkout
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  
      - alert_on_failure

  smoke-test:
    executor: smoke-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  
      - alert_on_failure

  cloudfront-update:
    executor: aws-executor
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  
      - alert_on_failure

  cleanup:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
      - alert_on_failure

workflows:
  build_test_scan_deploy_configure:
    jobs:
      - build-frontend:
          context: udapeople-ctx

      - build-backend:
          context: udapeople-ctx

      - test-frontend:
          context: udapeople-ctx
          requires: [build-frontend]

      - test-backend:
          context: udapeople-ctx
          requires: [build-backend]

      - scan-backend:
          context: udapeople-ctx
          requires: [build-backend]

      - scan-frontend:
          context: udapeople-ctx
          requires: [build-frontend]

      - deploy-infrastructure:
          context: udapeople-ctx
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]

      - configure-infrastructure:
          context: udapeople-ctx
          requires: [deploy-infrastructure]

      - run-migrations:
          context: udapeople-ctx
          requires: [configure-infrastructure]

      - deploy-frontend:
          context: udapeople-ctx
          requires: [run-migrations]
          
      - deploy-backend:
          context: udapeople-ctx
          requires: [run-migrations]

      - smoke-test:
          context: udapeople-ctx
          requires: [deploy-backend, deploy-frontend]

      - cloudfront-update:
          context: udapeople-ctx
          requires: [smoke-test]

      - cleanup:
          context: udapeople-ctx
          requires: [cloudfront-update]